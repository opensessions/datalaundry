#pragma checksum "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "495e969fa04a9a8c250184c1ef59822065b5c708"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_FeedProvider_FeedAnalysisResult), @"mvc.1.0.view", @"/Views/FeedProvider/FeedAnalysisResult.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/FeedProvider/FeedAnalysisResult.cshtml", typeof(AspNetCore.Views_FeedProvider_FeedAnalysisResult))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/_ViewImports.cshtml"
using DataLaundryApp;

#line default
#line hidden
#line 2 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/_ViewImports.cshtml"
using DataLaundryApp.Models;

#line default
#line hidden
#line 2 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
using DataLaundryDAL.DTO;

#line default
#line hidden
#line 3 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
using DataLaundryApp.ViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"495e969fa04a9a8c250184c1ef59822065b5c708", @"/Views/FeedProvider/FeedAnalysisResult.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e53a07086c94b630cf9c3f8d7b30af59307c9434", @"/Views/_ViewImports.cshtml")]
    public class Views_FeedProvider_FeedAnalysisResult : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Tuple<FeedProvider, List<IntelligentFeedMapping>>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(64, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 6 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
  
    ViewBag.Title = "Feed Analysis Result";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(223, 177, true);
            WriteLiteral("\r\n<style>\r\n    .ui-dialog{\r\n        position: fixed;\r\n    }\r\n</style>\r\n\r\n<div class=\"row wrapper border-bottom white-bg page-heading\">\r\n    <div class=\"col-lg-10\">\r\n        <h2>");
            EndContext();
            BeginContext(401, 13, false);
#line 19 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
       Write(ViewBag.Title);

#line default
#line hidden
            EndContext();
            BeginContext(414, 76, true);
            WriteLiteral("</h2>\r\n        <ol class=\"breadcrumb\">\r\n            <li>\r\n                <a");
            EndContext();
            BeginWriteAttribute("href", " href=\"", 490, "\"", 532, 1);
#line 22 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
WriteAttributeValue("", 497, Url.Action("Index","FeedProvider"), 497, 35, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(533, 97, true);
            WriteLiteral(">Feed Providers</a>\r\n            </li>\r\n            <li class=\"active\">\r\n                <strong>");
            EndContext();
            BeginContext(631, 13, false);
#line 25 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                   Write(ViewBag.Title);

#line default
#line hidden
            EndContext();
            BeginContext(644, 127, true);
            WriteLiteral("</strong>\r\n            </li>\r\n        </ol>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"wrapper wrapper-content animated fadeInRight\">\r\n");
            EndContext();
#line 32 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
     if (ViewBag.ErrorMessage != null)
    {

#line default
#line hidden
            BeginContext(818, 54, true);
            WriteLiteral("        <div class=\"alert alert-danger\">\r\n            ");
            EndContext();
            BeginContext(873, 20, false);
#line 35 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
       Write(ViewBag.ErrorMessage);

#line default
#line hidden
            EndContext();
            BeginContext(893, 18, true);
            WriteLiteral("\r\n        </div>\r\n");
            EndContext();
#line 37 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
    }
    else
    {
        if (Model != null && Model.Item2 != null && Model.Item2.Count > 0)
        {
            

#line default
#line hidden
            BeginContext(1784, 133, true);
            WriteLiteral("            <div class=\"alert alert-success\">\r\n                Feed analyzed successfully, please review below:\r\n            </div>\r\n");
            EndContext();
            BeginContext(1932, 37, false);
#line 65 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
       Write(Html.Partial("_Details", Model.Item1));

#line default
#line hidden
            EndContext();
            BeginContext(1973, 945, true);
            WriteLiteral(@"            <div class=""ibox"">
                <div class=""ibox-content"">

                    <div class=""clearfix"">
                        <a href='javascript:void(0);' class=""btn btn-primary pull-right"" onclick=""openViewSampleJson();"" style=""margin-left:10px;"">View Json Data</a>
                        <a href='javascript:void(0);' class=""btn btn-primary pull-right"" onclick=""openAddCustomFeedKey()"" style=""margin-left:10px;"">Add Custom Feed Key</a>

                        <a href='javascript:void(0);' class=""btn btn-primary pull-right collapseAll"" style=""margin-left:10px;"">
                            <i class=""fa fa-minus-circle""></i>&nbsp;Collapse All
                        </a>
                        <a href='javascript:void(0);' class=""btn btn-primary pull-right expandAll"">
                            <i class=""fa fa-plus-circle""></i>&nbsp;Expand All
                        </a>
                    </div>

");
            EndContext();
#line 82 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                     if (Model.Item2.Count > 0)
                    {
                        var lstChildrenFound = Model.Item2.Where(x => !string.IsNullOrEmpty(x.FeedMapping.FeedKey) && x.ParentId == null && x.FeedMapping.IsDeleted != true).OrderBy(x => x.FeedMapping.Position).ToList();
                        var lstChildrenNotFound = Model.Item2.Where(x => string.IsNullOrEmpty(x.FeedMapping.FeedKey) && x.ParentId == null && x.FeedMapping.IsDeleted != true).ToList();
                        var lstDeletedChildren = Model.Item2.Where(x => x.ParentId == null && x.FeedMapping.IsDeleted == true).ToList();
                        

#line default
#line hidden
            BeginContext(3561, 200, true);
            WriteLiteral("                        <div class=\"matchedFields\">\r\n                            <h2>Matched Fields</h2>\r\n\r\n                            <div class=\"table-responsive\">\r\n                                ");
            EndContext();
            BeginContext(3762, 174, false);
#line 92 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                           Write(Html.Partial("_HelperFeedAnalysisResult.cshtml",new vmHelperModel(){hasMatchesFound=true,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstChildrenFound}));

#line default
#line hidden
            EndContext();
            BeginContext(3936, 70, true);
            WriteLiteral("\r\n                            </div>\r\n                        </div>\r\n");
            EndContext();
            BeginContext(4008, 207, true);
            WriteLiteral("                        <div class=\"nonMatchedFields\">\r\n                            <h2>Non-Matched Fields</h2>\r\n\r\n                            <div class=\"table-responsive\">\r\n                                ");
            EndContext();
            BeginContext(4216, 178, false);
#line 100 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                           Write(Html.Partial("_HelperFeedAnalysisResult.cshtml",new vmHelperModel(){hasMatchesFound=false,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstChildrenNotFound}));

#line default
#line hidden
            EndContext();
            BeginContext(4394, 70, true);
            WriteLiteral("\r\n                            </div>\r\n                        </div>\r\n");
            EndContext();
            BeginContext(4466, 207, true);
            WriteLiteral("                        <div class=\"deletedMatchedFields\">\r\n                            <h2>Deleted Fields</h2>\r\n\r\n                            <div class=\"table-responsive\">\r\n                                ");
            EndContext();
            BeginContext(4674, 177, false);
#line 108 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                           Write(Html.Partial("_HelperFeedAnalysisResult.cshtml",new vmHelperModel(){hasMatchesFound=false,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstDeletedChildren}));

#line default
#line hidden
            EndContext();
            BeginContext(4851, 70, true);
            WriteLiteral("\r\n                            </div>\r\n                        </div>\r\n");
            EndContext();
#line 111 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                    }

#line default
#line hidden
            BeginContext(4944, 46, true);
            WriteLiteral("\r\n                </div>\r\n            </div>\r\n");
            EndContext();
            BeginContext(4992, 167, true);
            WriteLiteral("            <div class=\"form-group clearfix\">\r\n                <button id=\"btnConfirm\" class=\"btn btn-lg btn-primary pull-right\">Confirm</button>\r\n            </div>\r\n");
            EndContext();
#line 119 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
        }
        else
        {

#line default
#line hidden
            BeginContext(5195, 109, true);
            WriteLiteral("            <div class=\"alert alert-danger\">\r\n                No Feed Key Mapping found\r\n            </div>\r\n");
            EndContext();
#line 125 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
        }
    }

#line default
#line hidden
            BeginContext(5322, 724, true);
            WriteLiteral(@"
    <div id=""EditFieldMappingDialog"" class=""modal"" style=""overflow: hidden;"">
        No data found
    </div>

    <div id=""ViewSampleJsonDialog"" class=""modal"">
        <pre style=""white-space: pre-wrap;max-height: 400px;"">No data found</pre>
    </div>

    <div id=""ViewSampleFeedKeyValueDialog"" class=""modal"">
        <div></div>
        <b>Feed Data</b>
        <pre style=""white-space: pre-wrap;max-height: 400px;"">No data found</pre>
    </div>

    <div id=""AddCustomFeedKeyMappingDialog"" class=""modal"" style=""overflow: hidden;"">
        No data found
    </div>

    <div id=""EditCustomFeedKeyMappingDialog"" class=""modal"" style=""overflow: hidden;"">
        No data found
    </div>
</div>

");
            EndContext();
            DefineSection("scripts", async() => {
                BeginContext(6063, 6405, true);
                WriteLiteral(@"
    <script type=""text/javascript"">
        var arrFeedMapping = [], arrFeedMappingFinal = [];

        $(function () {
            $("".feedKeyMapping td.details-control"").click(function () {
                $(this).parent().toggleClass(""shown"");

                if ($(this).parent().hasClass(""shown"")) {
                    $(this).parent().next("".childrow"").show();
                }
                else {
                    $(this).parent().next("".childrow"").hide();
                }
            });

            $("".expandAll"").click(function () {
                $('.childrow').prev('tr').addClass('shown');
                $('.childrow').slideDown();

            });

            $("".collapseAll"").click(function () {
                $('.childrow').prev('tr').removeClass('shown');
                $('.childrow').slideUp();
            });

            $("".up,.down"").click(function () {                
                var row = $(this).parents(""tr:first"");
                if ($(th");
                WriteLiteral(@"is).is("".up"")) {
                    var prevRowVal = row.prev().find(""#new_Position"").val();
                    var nextRowVal = row.find(""#new_Position"").val();

                    if (prevRowVal && nextRowVal)
                    {
                        row.find(""#new_Position"").val(prevRowVal);
                        row.prev().find(""#new_Position"").val(nextRowVal);
                    }
                    row.insertBefore(row.prev());
                }
                else if ($(this).is("".down"")) {
                    var prevRowVal = row.next().find(""#new_Position"").val();
                    var nextRowVal = row.find(""#new_Position"").val();

                    if (prevRowVal && nextRowVal)
                    {
                        row.find(""#new_Position"").val(prevRowVal);
                        row.next().find(""#new_Position"").val(nextRowVal);
                    }
                    row.insertAfter(row.next());
                }                
            });

 ");
                WriteLiteral(@"           $('#ViewSampleJsonDialog').dialog({
                autoOpen: false,
                width: 800,
                //height: 500,
                resizable: false,
                title: 'View Sample Json',
                modal: true,
                buttons: {
                    ""Close"": function () {
                        $(this).dialog(""close"");
                    }
                },
                open: function (event, ui) {
                    changeDialogPosition();
                }
            });

            $('#ViewSampleFeedKeyValueDialog').dialog({
                autoOpen: false,
                width: 800,
                //height: 500,
                resizable: false,
                title: 'View Feed Key Data',
                modal: true,
                buttons: {
                    ""Close"": function () {
                        $(this).dialog(""close"");
                    }
                },
                open: function (event, ui) {
    ");
                WriteLiteral(@"                changeDialogPosition();
                }
            });

            $('#EditFieldMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                resizable: false,
                title: 'Edit Field Mapping',
                modal: true,
                buttons: {
                    //""Save Without Selection"": function () {
                    //    if ($('#frmEditFieldMapping').length > 0) {
                    //        editFieldMapping(false);
                    //    }
                    //},
                    ""Save"": function () {
                        if ($('#frmEditFieldMapping').length > 0) {
                            if ($(""#frmEditFieldMapping"").valid()) {
                                var selectedNodeCount = $(""#FeedKeyTree"").jstree(""get_selected"").length;

                                if (selectedNodeCount == 0) {
                                    toastr.error(""Please select at least one feed key from the");
                WriteLiteral(@" tree view"");
                                    return;
                                }

                                editFieldMapping(true);
                            }
                        }
                    },
                    ""Close"": function () {
                        $(this).dialog(""close"");
                    }
                },
                open: function (event, ui) {

                    $('#frmEditFieldMapping').validate({
                        rules: {
                            FeedKeyPath: { required: true }
                        }
                    });
                }
            });

            $('#AddCustomFeedKeyMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                //height: 500,
                resizable: false,
                title: 'Add Custom Feed Key',
                modal: true,
                buttons: {
                    ""Save"": function () {
                        ");
                WriteLiteral(@"if ($('#frmCreateCustomFeedKeyMapping').length > 0) {
                            if ($(""#frmCreateCustomFeedKeyMapping"").valid()) {
                                var selectedNodeCount = $(""#frmCreateCustomFeedKeyMapping #LeafFeedKeyTree"").jstree(""get_selected"").length;

                                if (selectedNodeCount == 0) {
                                    toastr.error(""Please select at least one feed key from the tree view"");
                                    return;
                                }

                                createCustomFeedMapping();
                            }
                        }
                    },
                    ""Close"": function () {
                        $(this).dialog(""close"");
                    }
                },
                open: function (event, ui) {
                    changeDialogPosition();

                    if ($('#frmCreateCustomFeedKeyMapping').length > 0) {
                        $('#frmCreateCustomFe");
                WriteLiteral(@"edKeyMapping').validate({
                            rules: {
                                CustomKeyName: {
                                    required: true,
                                    remote: {
                                        url: '");
                EndContext();
                BeginContext(12469, 49, false);
#line 313 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                         Write(Url.Action("CheckFeedColumnName", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(12518, 2877, true);
                WriteLiteral(@"',
                                        type: ""post"",
                                        data: {
                                            FeedProviderId: function () {
                                                return $(""#Id"").val();
                                            },
                                            columnName: function () {
                                                return $(""#frmCreateCustomFeedKeyMapping #CustomKeyName"").val();
                                            }
                                        }
                                    }
                                }
                            },
                            messages: {
                                CustomKeyName: {
                                    required: ""This field is required."",
                                    remote: ""Custom Key Name already exists.""
                                }
                            }
                        });
 ");
                WriteLiteral(@"                   }
                    
                },
                close: function (event, ui) {
                    //$(""#frmCreateCustomFeedKeyMapping"").remove();
                }
            });

            $('#EditCustomFeedKeyMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                //height: 500,
                resizable: false,
                title: 'Edit Custom Feed Key',
                modal: true,
                buttons: {
                    ""Save"": function () {
                        if ($('#frmEditCustomFeedKeyMapping').length > 0) {
                            if ($(""#frmEditCustomFeedKeyMapping"").valid()) {
                                var selectedNodeCount = $(""#frmEditCustomFeedKeyMapping #LeafFeedKeyTree"").jstree(""get_selected"").length;

                                if (selectedNodeCount == 0) {
                                    toastr.error(""Please select at least one feed key from the tree view"");
");
                WriteLiteral(@"                                    return;
                                }

                                editCustomFeedMapping();
                            }
                        }
                    },
                    ""Close"": function () {
                        $(this).dialog(""close"");
                    }
                },
                open: function (event, ui) {
                    changeDialogPosition();

                    if ($('#frmEditCustomFeedKeyMapping').length > 0) {
                        $('#frmEditCustomFeedKeyMapping').validate({
                            rules: {
                                CustomKeyName: {
                                    required: true,
                                    remote: {
                                        url: '");
                EndContext();
                BeginContext(15396, 49, false);
#line 376 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                         Write(Url.Action("CheckFeedColumnName", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(15445, 2572, true);
                WriteLiteral(@"',
                                        type: ""post"",
                                        data: {
                                            id: function () {
                                                return $(""#frmEditCustomFeedKeyMapping #Id"").val();
                                            },
                                            FeedProviderId: function () {
                                                return $(""#Id"").val();
                                            },
                                            columnName: function () {
                                                return $(""#frmEditCustomFeedKeyMapping #CustomKeyName"").val();
                                            },
                                        }
                                    }
                                }
                            },
                            messages: {
                                CustomKeyName: {
                                    re");
                WriteLiteral(@"quired: ""This field is required."",
                                    remote: ""Custom Key Name already exists.""
                                }
                            }
                        });
                    }
                    
                },
                close: function (event, ui) {
                    //$(""#frmEditCustomFeedKeyMapping"").remove();
                }
            });

            $.validator.addMethod(""checkTags"", function (value)     {
                //add custom method
                //Tags input plugin converts input into div having id #YOURINPUTID_tagsinput
                //now you can count no of tags
                return ($(""#PossibleMatches"").prev("".bootstrap-tagsinput"").find('.tag').length > 0);
            });

            $(""#btnConfirm"").click(function () {
                arrFeedMapping = [], arrFeedMappingFinal = [];
                //confirm feed analysis
                var feedProviderId = $(""#Id"").val();

               ");
                WriteLiteral(@" //get feed mapping done in the matched section
                GetMappingByTableId($('#tblMatchesFound'));
                //get feed mapping done in the not matched ection
                GetMappingByTableId($('#tblMatchesNotFound'));

                if (arrFeedMapping.length == 0) {
                    toastr.error(""Please map at least one feed key with column name"");
                    return;
                }
                //ajax call to save data
                $.ajax({
                    url: '");
                EndContext();
                BeginContext(18018, 48, false);
#line 430 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                     Write(Url.Action("ConfirmFeedAnalysis","FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(18066, 514, true);
                WriteLiteral(@"',
                    data: JSON.stringify({ 'lstFeedMapping': arrFeedMappingFinal, 'feedProviderId': feedProviderId, 'IsFeedMappingChanged': arrFeedMappingFinal.length > 0 }),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',
                    success: function (data, textStatus, jQxhr) {
                        if (data.status == true)
                        {
                            //location.href = '");
                EndContext();
                BeginContext(18581, 35, false);
#line 438 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                          Write(Url.Action("Index", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(18616, 3589, true);
                WriteLiteral(@"';
                            window.location.reload();
                        }
                        else
                            toastr.error(data.message);
                    },
                    error: function (jqXhr, textStatus, errorThrown) {

                        toastr.error(""Something went wrong. Please try again soon."");
                    }
                });
            });

            $(document).on('click', '.editFieldMapping:enabled', function () {
                openEditFieldMapping(this);
            });
        });

        function changeDialogPosition() {
            $('.modal').dialog(""option"", ""position"", { my: ""center top"", at: ""center top+50"", of: window });
        }

        function GetMappingByTableId(table) {
            $(table).find(""tbody tr:not(.childrow)"").each(function (i, obj) {
                GetMappingByTableIdInner(i, obj);
            });
        }

        function GetMappingByTableIdInner(i, obj) {
            var feed");
                WriteLiteral(@"ProviderId = $(""#Id"").val();
            var prevFeedKeyPath = $(obj).data(""feedKeyPath"");

            var tableName = $($(obj).find('.tableName')[0]).text(),
            columnName = $($(obj).find('.actualColumnName')[0]).val(),
            feedKeyPath = $($(obj).find('.feedKeyPath > span')[0]).text();

            if (tableName != undefined && tableName != '') {
                var parentId = $($(obj).find('.parentId')[0]).val();
                var feedMappingParentId = $($(obj).find('.feedMappingParentId')[0]).val();
                
                var isCustomFeedKey = $($(obj).find('.isCustomFeedKey')[0]).val();

                var actualFeedKeyPath = $($(obj).find('.actualFeedKeyPath')[0]).val();
                var ColumnDataType = $($(obj).find('.ColumnDataType')[0]).val();
                var oldPosition = $($(obj).find('#old_Position')[0]).val();
                var newPosition = $($(obj).find('#new_Position')[0]).val();

                var feedMappingObj = {
                ");
                WriteLiteral(@"    FeedProviderId: feedProviderId,
                    ParentId: parentId,
                    FeedMappingParentId: feedMappingParentId,
                    IsCustomFeedKey: isCustomFeedKey,
                    TableName: tableName,
                    ColumnName: columnName,
                    FeedKeyPath: feedKeyPath,
                    ActualFeedKeyPath: actualFeedKeyPath,
                    ColumnDataType: ColumnDataType,
                    Position: newPosition
                };

                if (prevFeedKeyPath != feedKeyPath || oldPosition != newPosition)
                    arrFeedMappingFinal.push(feedMappingObj);

                arrFeedMapping.push(feedMappingObj);
            }

            if ($(obj).hasClass('childrow')) {
                var matchedFields = $('.childrow').children('.matchedFields');

                var tableCount = $(matchedFields).find('table').length;

                if (tableCount > 0) {
                    GetMappingByTableId($(matchedFiel");
                WriteLiteral(@"ds).find('table')[0]);
                }

                var nonMatchedFields = $('.childrow').children('.nonMatchedFields');

                var tableCount = $(nonMatchedFields).find('table').length;

                if (tableCount > 0) {
                    GetMappingByTableId($(nonMatchedFields).find('table')[0]);
                }
            }
        }

        function openViewSampleJson() {
            var feedProviderId = $(""#Id"").val();
            $(""#ViewSampleJsonDialog pre"").load('");
                EndContext();
                BeginContext(22207, 42, false);
#line 525 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                             Write(Url.Action("ViewItemJson", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(22250, 1020, true);
                WriteLiteral(@"/' + feedProviderId, function (response, status, xhr) {
                $(""#ViewSampleJsonDialog"").dialog(""open"");
            });
        }

        function openEditFieldMapping(row) {            
            if (row != null || row != undefined) {
                var feedProviderId = $(""#Id"").val();
                var tableName = $($(row).parent().parent().find('.tableName')[0]).text(),
                    actualColumnName = $($(row).parent().parent().find('.actualColumnName')[0]).val(),
                    feedKeyPath = $($(row).parent().parent().find('.feedKeyPath > span')[0]).text(),
                    ColumnDataType = $($(row).parent().parent().find('.ColumnDataType')[0]).val(),
                    parentFeedKeyPath = '';

                var childRow = $(row).closest('tr.childrow');

                if (childRow.length == 1) {
                    parentFeedKeyPath = $(childRow.prev('tr').find('.feedKeyPath > span')[0]).text();
                }

                var baseUrl = '");
                EndContext();
                BeginContext(23271, 46, false);
#line 545 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                          Write(Url.Action("EditFieldMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(23317, 1909, true);
                WriteLiteral(@"';
                var finalUrl = baseUrl + '/' + feedProviderId + ""?tableName="" + tableName + ""&columnName="" + actualColumnName + ""&feedKeyPath="" + encodeURIComponent(feedKeyPath) + ""&parentFeedKeyPath="" + encodeURIComponent(parentFeedKeyPath);

                //$(""#EditFieldMappingDialog"").dialog(""open"");

                $(""#EditFieldMappingDialog"").load(finalUrl, function (response, status, xhr) {
                    $(""#EditFieldMappingDialog"").dialog(""open"");
                });
            }
        }

        function openViewSampleFeedKeyValue(row) {
            if (row != null || row != undefined) {
                var html = '';
                var feedProviderId = $(""#Id"").val();

                var tableName = $($(row).parent().parent().find('.tableName')[0]).text();
                var columnName = $($(row).parent().parent().find('.columnName span')[0]).text();
                var feedKeyPath = $($(row).parent().parent().find('.feedKeyPath > span')[0]).text();
              ");
                WriteLiteral(@"  var actualFeedKeyPath = $($(row).parent().parent().find('.actualFeedKeyPath')[0]).val();

                html += '<table class=""table table-bordered table-striped"">';
                html += '   <tr>'
                html += '       <th>Table Name</th>'
                html += '       <td>' + tableName + '</td>'
                html += '   </tr>'
                html += '   <tr>'
                html += '       <th>Column Name</th>'
                html += '       <td>' + columnName + '</td>'
                html += '   </tr>'
                html += '   <tr>'
                html += '       <th>Feed Key</th>'
                html += '       <td>' + feedKeyPath + '</td>'
                html += '   </tr>'
                html += '</table>';

                $(""#ViewSampleFeedKeyValueDialog"").children('div').html(html);

                var baseUrl = '");
                EndContext();
                BeginContext(25227, 45, false);
#line 583 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                          Write(Url.Action("ViewFeedKeyJson", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(25272, 529, true);
                WriteLiteral(@"';
                var finalUrl = baseUrl + '?id=' + feedProviderId + ""&jsonPath="" + encodeURIComponent(actualFeedKeyPath);
               
                $(""#ViewSampleFeedKeyValueDialog"").children('pre').load(finalUrl, function (response, status, xhr) {
                    $(""#ViewSampleFeedKeyValueDialog"").dialog(""open"");
                });
            }
        }

        function openAddCustomFeedKey() {
            var feedProviderId = $(""#Id"").val();
            $(""#AddCustomFeedKeyMappingDialog"").load('");
                EndContext();
                BeginContext(25803, 56, false);
#line 594 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                                  Write(Url.Action("CreateCustomFeedKeyMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(25860, 307, true);
                WriteLiteral(@"/' + feedProviderId, function (response, status, xhr) {
                $(""#AddCustomFeedKeyMappingDialog"").dialog(""open"");
            });
        }

        function openEditCustomFeedKey(id) {
            var feedProviderId = $(""#Id"").val();
            $(""#EditCustomFeedKeyMappingDialog"").load('");
                EndContext();
                BeginContext(26169, 54, false);
#line 601 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                                                   Write(Url.Action("EditCustomFeedKeyMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(26224, 11243, true);
                WriteLiteral(@"?id=' + id + '&feedProviderId=' + feedProviderId, function (response, status, xhr) {
                $(""#EditCustomFeedKeyMappingDialog"").dialog(""open"");
            });
        }

        function editFieldMapping(isSelection) {
            var tableName = $(""#TableName"").val();
            var columnName = $(""#ColumnName"").val();
            var actualColumnName = $(""#ActualColumnName"").val();
            var feedKeyNodeValue = $(""#FeedKeyPath"").val();
            var feedKeyPath = '';
            var actualFeedKeyPath = '';
            var columnDataType = '';

            if (isSelection == true) {
                var feedKeyPathNodeParts = feedKeyNodeValue.split('||');
                feedKeyPath = feedKeyPathNodeParts[0];
                actualFeedKeyPath = feedKeyPathNodeParts[1];
                columnDataType = feedKeyPathNodeParts[2]
            }
            var tblMatchesFoundRow = $(""#tblMatchesFound tbody tr[data-table-name='"" + tableName + ""'][data-column-name='"" + actualCol");
                WriteLiteral(@"umnName + ""']"");
            var tblMatchesNotFoundRow = $(""#tblMatchesNotFound tbody tr[data-table-name='"" + tableName + ""'][data-column-name='"" + actualColumnName + ""']"");

            if (tblMatchesFoundRow.length == 1) {
                moveRowToTargetTable(tblMatchesFoundRow, isSelection ,feedKeyPath, actualFeedKeyPath, columnDataType);
            }
            else if (tblMatchesNotFoundRow.length == 1) {
                moveRowToTargetTable(tblMatchesNotFoundRow, isSelection ,feedKeyPath, actualFeedKeyPath, columnDataType);
            }

            $(""#EditFieldMappingDialog"").dialog(""close"");
        }

        function moveRowToTargetTable(element, isSelection ,feedKeyPath, actualFeedKeyPath, columnDataType) {
            if (element.length == 1) {
                var feedKeyPathElement = element.find('.feedKeyPath > span');
                var actualFeedKeyPathElement = element.find('.actualFeedKeyPath');
                var ColumnDataTypeElement = element.find('.ColumnDataType')");
                WriteLiteral(@";
                $(feedKeyPathElement[0]).text(feedKeyPath);
                $(actualFeedKeyPathElement[0]).val(actualFeedKeyPath);
                $(ColumnDataTypeElement[0]).val(columnDataType);

                var childRow = $(element).next('.childrow');

                var matchedFields;
                var nonMatchedFields;
                var targetTbody;
                var sourceTbody;

                if (isSelection == true) {
                    nonMatchedFields = $(element).closest('.nonMatchedFields');

                    //check if need to move to target element
                    if (nonMatchedFields.length == 0)
                        return;

                    //get first closest one
                    nonMatchedFields = nonMatchedFields[0];
                    matchedFields = $(nonMatchedFields).prev('.matchedFields');
                }
                else {
                    matchedFields = $(element).closest('.matchedFields');

                    //ch");
                WriteLiteral(@"eck if need to move to target element
                    if (matchedFields.length == 0)
                        return;

                    //get first closest one
                    matchedFields = matchedFields[0];
                    nonMatchedFields = $(matchedFields).next('.nonMatchedFields');
                }

                if (isSelection == true) {
                    //recursively move all childs from non-matched to matched section
                    sourceTbody = $(nonMatchedFields).children().children().children('table > tbody');
                    targetTbody = $(matchedFields).children().children().children('table > tbody');

                    if (targetTbody.length > 0) {
                        //get the first immediate tbody
                        targetTbody = targetTbody[0];

                        $(targetTbody).children('tr.trNotFound').hide();

                        //this will move row from source and append it to target element
                        ");
                WriteLiteral(@"$(targetTbody).append(element);

                        if (childRow.length == 1) {
                            $(targetTbody).append(childRow);

                            //enable buttons of child feed key mappings
                            var childMatchedFieldsTable = $(childRow).children().children('.matchedFields').children().children('table');
                            var childNonMatchedFieldsTable = $(childRow).children().children('.nonMatchedFields').children().children('table')

                            if (childMatchedFieldsTable.length > 0) {
                                childMatchedFieldsTable = childMatchedFieldsTable[0];

                                var childMatchedRows = $(childMatchedFieldsTable).children('tbody').children('tr');

                                if (childMatchedRows.length > 0) {
                                    for (var i = 0; i < childMatchedRows.length; i++) {
                                        var changeBtn = $(childMatchedRows[i])");
                WriteLiteral(@".children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                                            $(changeBtn).removeAttr('disabled');
                                        }
                                    }
                                }
                            }

                            if (childNonMatchedFieldsTable.length > 0) {
                                childNonMatchedFieldsTable = childNonMatchedFieldsTable[0];

                                var childNonMatchedRows = $(childNonMatchedFieldsTable).children('tbody').children('tr');

                                if (childNonMatchedRows.length > 0) {
                                    for (var i = 0; i < childNonMatchedRows.length; i++) {
                                        var changeBtn = $(childNonMatchedRows[i]).children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                          ");
                WriteLiteral(@"                  $(changeBtn).removeAttr('disabled');
                                        }
                                    }
                                }
                            }
                        }

                        if (sourceTbody.length > 0) {
                            //get the first immediate tbody
                            sourceTbody = sourceTbody[0];
                            var trCount = $(sourceTbody).children('tr').length;

                            //check if all rows moved except not found one
                            if (trCount == 1)
                                $(sourceTbody).children('tr.trNotFound').show();
                        }
                    }
                }
                else {
                    //recursively move all childs from matched to non-matched section
                    sourceTbody = $(matchedFields).children().children().children('table > tbody');
                    targetTbody = $(nonMatchedF");
                WriteLiteral(@"ields).children().children().children('table > tbody');

                    if (targetTbody.length > 0) {
                        //get the first immediate tbody
                        targetTbody = targetTbody[0];

                        $(targetTbody).children('tr.trNotFound').hide();

                        //this will move row from source and append it to target element
                        $(targetTbody).append(element);

                        if (childRow.length == 1) {
                            $(targetTbody).append(childRow);

                            var childMatchedFieldsTable = $(childRow).children().children('.matchedFields').children().children('table');
                            var childNonMatchedFieldsTable = $(childRow).children().children('.nonMatchedFields').children().children('table')

                            //this will move all rows from matched table to non-matched table
                            if (childMatchedFieldsTable.length > 0) {
       ");
                WriteLiteral(@"                         childMatchedFieldsTable = childMatchedFieldsTable[0];

                                var childMatchedRows = $(childMatchedFieldsTable).children('tbody').children('tr:not(.trNotFound)');

                                if (childMatchedRows.length > 0) {
                                    for (var i = 0; i < childMatchedRows.length; i++) {
                                        moveRowToTargetTable($(childMatchedRows[i]), isSelection, feedKeyPath, actualFeedKeyPath, columnDataType);
                                        //var changeBtn = $(childMatchedRows[i]).children().children('.editFieldMapping');
                                        //if (changeBtn.length != 0) {
                                        //    $(changeBtn).attr('disabled', 'disabled');
                                        //}
                                    }
                                }
                            }

                            //disable buttons of child feed key");
                WriteLiteral(@" mappings
                            if (childNonMatchedFieldsTable.length > 0) {
                                childNonMatchedFieldsTable = childNonMatchedFieldsTable[0];

                                var childNonMatchedRows = $(childNonMatchedFieldsTable).children('tbody').children('tr');

                                if (childNonMatchedRows.length > 0) {
                                    for (var i = 0; i < childNonMatchedRows.length; i++) {
                                        var changeBtn = $(childNonMatchedRows[i]).children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                                            $(changeBtn).attr('disabled', 'disabled');
                                        }
                                    }
                                }
                            }
                        }

                        if (sourceTbody.length > 0) {
                            //get the fir");
                WriteLiteral(@"st immediate tbody
                            sourceTbody = sourceTbody[0];
                            var trCount = $(sourceTbody).children('tr').length;
                            //check if all rows moved except not found one
                            if (trCount == 1)
                                $(sourceTbody).children('tr.trNotFound').show();
                        }
                    }
                }
            }
        }

        function createCustomFeedMapping() {
            var feedProviderId = $(""#Id"").val();
            var customKeyName = $(""#frmCreateCustomFeedKeyMapping #CustomKeyName"").val();
            var feedKeyPath = $(""#frmCreateCustomFeedKeyMapping #FeedKeyPath"").val();

            var input = {
                FeedProviderId: feedProviderId,
                CustomKeyName: customKeyName,
                FeedKeyPath: feedKeyPath
            };

            //ajax call to save data
            $.ajax({
                url: '");
                EndContext();
                BeginContext(37468, 56, false);
#line 816 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                 Write(Url.Action("CreateCustomFeedKeyMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(37524, 1278, true);
                WriteLiteral(@"',
                data: input,
                type: 'POST',
                success: function (data, textStatus, jQxhr) {
                    if (data.status == true) {
                        $(""#AddCustomFeedKeyMappingDialog"").dialog(""close"");
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {

                    toastr.error(""Something went wrong. Please try again soon."");
                }
            });
        }

        function editCustomFeedMapping() {
            var id = $(""#frmEditCustomFeedKeyMapping #Id"").val();
            var feedProviderId = $(""#Id"").val();
            var customKeyName = $(""#frmEditCustomFeedKeyMapping #CustomKeyName"").val();
            var feedKeyPath = $(""#frmEditCustomFeedKeyMapping #FeedKeyPath"").val();

            var input = {
         ");
                WriteLiteral("       Id: id,\r\n                FeedProviderId: feedProviderId,\r\n                CustomKeyName: customKeyName,\r\n                FeedKeyPath: feedKeyPath\r\n            };\r\n\r\n            //ajax call to save data\r\n            $.ajax({\r\n                url: \'");
                EndContext();
                BeginContext(38803, 54, false);
#line 850 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                 Write(Url.Action("EditCustomFeedKeyMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(38857, 1281, true);
                WriteLiteral(@"',
                data: input,
                type: 'POST',
                success: function (data, textStatus, jQxhr) {

                    if (data.status == true) {
                        $(""#EditCustomFeedKeyMappingDialog"").dialog(""close"");
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {

                    toastr.error(""Something went wrong. Please try again soon."");
                }
            });
        }

        function openDeleteCustomFeedKey(id) {
            swal({
                title: 'Are you sure to delete this custom feed key?',
                text: ""You will not be able to recover!"",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
    ");
                WriteLiteral(@"            confirmButtonText: 'Yes'
            }).then(function () {

                deleteCustomFeedKey(id);
            },
            function () {
            });
        }

        function deleteCustomFeedKey(id) {
            var url = '");
                EndContext();
                BeginContext(40139, 56, false);
#line 888 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                  Write(Url.Action("DeleteCustomFeedKeyMapping", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(40195, 1104, true);
                WriteLiteral(@"';

            $.ajax({
                url: url,
                type: ""POST"",
                data: { ""id"": id },
                success: function (data) {
                    if (data.status == true) {
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (reponse) {
                    toastr.error(""Something went wrong. Please try again soon."");
                }
            });
        }        

        function activateDeactivateFeed(id, isActive) {
            swal({
                title: 'Are you sure to activate/deactivate this feed key?',
                text: ""You will not be able to recover"",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
       ");
                WriteLiteral("     }).then(function () {\r\n                $.ajax({\r\n                    url: \'");
                EndContext();
                BeginContext(41300, 55, false);
#line 919 "/Applications/08-07-2019/Jishan/#NetCore/Final/DataLaundryApp/DataLaundryApp/Views/FeedProvider/FeedAnalysisResult.cshtml"
                     Write(Url.Action("ActivateDeactivateFeedKey", "FeedProvider"));

#line default
#line hidden
                EndContext();
                BeginContext(41355, 663, true);
                WriteLiteral(@"',
                    type: ""POST"",
                    data: { ""id"": id, ""isActive"": isActive },                   
                    success: function (data) {
                        if (data.status == true) {
                            location.reload(true);
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (reponse) {
                        toastr.error(""Something went wrong. Please try again soon."");
                    }
                });
            });
        }
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Tuple<FeedProvider, List<IntelligentFeedMapping>>> Html { get; private set; }
    }
}
#pragma warning restore 1591
