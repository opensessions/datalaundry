@using DataLaundryDAL.DTO
@using DataLaundryApp.ViewModels;

@model Tuple<FeedProvider, List<IntelligentFeedMapping>>
@{
    ViewBag.Title = "Feed Mapping Result";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .ui-dialog {
        position: fixed;
    }
    .not-active {
        pointer-events: none;
        cursor: default;
        text-decoration: none;
        color: dimgrey;
    }
    .btn-position-fixed {
        right: 33px;
        position: fixed;
        bottom: 10px;
        z-index: 999;
        box-shadow: -1px 2px 30px 11px #5d5d5d;
    }
    .skipfiled {
        background-color: #1ab394;
        color: white;
        font-weight: bold;
    }
    .AlertNonMatch 
    {
        font-weight: bold;
        color: #ff0000;
    }
    .odd 
    {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>@ViewBag.Title</h2>
        <ol class="breadcrumb">
            <li>
                <a href="@Url.Action("Index","FeedProvider")">Feed Providers</a>
            </li>
            <li class="active">
                <strong>@ViewBag.Title</strong>
            </li>
        </ol>
    </div>
</div>

@if (Model?.Item2?.Count > 0)
{
    <div>
        <button id="btnConfirm" class="btn btn-lg btn-primary btn-position-fixed pull-right">Confirm</button>
    </div>
}

<div class="wrapper wrapper-content animated fadeInRight">
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="alert alert-danger">
            @ViewBag.ErrorMessage
        </div>
    }
    else
    {
        if (Model?.Item2?.Count > 0)
        {
            <div class="alert alert-success">
                Feed mapped/analyzed successfully, please review below:
            </div>

            @Html.Partial("_Details", Model.Item1)

            <div class="ibox">
                <div class="ibox-content">
                    <div class="clearfix">
                        <a href='javascript:void(0);' class="btn btn-primary pull-right" onclick="openViewSampleJson();" style="margin-left:10px;">View Json Data</a>
                        <a href='javascript:void(0);' class="btn btn-primary pull-right" onclick="openAddCustomFeedKey()" style="margin-left:10px;">Add Custom Feed Key</a>
                        <a href='javascript:void(0);' class="btn btn-primary pull-right collapseAll" style="margin-left:10px;">
                            <i class="fa fa-minus-circle"></i>&nbsp;Collapse All
                        </a>
                        <a href='javascript:void(0);' class="btn btn-primary pull-right expandAll" style="margin-left:10px;">
                            <i class="fa fa-plus-circle"></i>&nbsp;Expand All
                        </a>
                        <a href='javascript:void(0);' class="btn btn-primary pull-right reAnalyze" onclick="openReAnalyze(@Model.Item1.Id,false);">
                            <i class="fa fa-refresh"></i>&nbsp;Reanalyze
                        </a>
                    </div>
                    
                   
                    @if (Model.Item2.Count > 0)
                    {
                        var lstChildrenFound = Model.Item2.Where(x => !string.IsNullOrEmpty(x.FeedMapping.FeedKey) && x.ParentId == null && x.FeedMapping.IsDeleted != true).OrderBy(x => x.FeedMapping.Position).ToList();
                        var lstChildrenNotFound = Model.Item2.Where(x => string.IsNullOrEmpty(x.FeedMapping.FeedKey) && x.ParentId == null && x.FeedMapping.IsDeleted != true).ToList();
                        var lstDeletedChildren = Model.Item2.Where(x => x.ParentId == null && x.FeedMapping.IsDeleted == true).ToList();

                        <div class="matchedFields">
                            <h2>Matched Fields</h2>
                            <div class="table-responsive">
                                @Html.Partial("_Helper.cshtml",new vmHelperModel(){hasMatchesFound=true,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstChildrenFound } )
                            </div>
                        </div>
                        <div class="nonMatchedFields">
                            <div class="NonMatchKey">
                                <h2 class="AlertNonMatch">Non-Matched Fields</h2>
                                <div class="table-responsive">
                                    @Html.Partial("_Helper.cshtml",new vmHelperModel(){hasMatchesFound=false,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstChildrenNotFound } )
                                </div>
                            </div>
                        </div>
                        <div class="deletedMatchedFields">
                            <h2>Deleted Fields</h2>
                            <div class="table-responsive">
                                @Html.Partial("_Helper.cshtml",new vmHelperModel(){hasMatchesFound=false,lstIntelligentFeedMappingAll=Model.Item2,lstIntelligentFeedMapping=lstDeletedChildren } )
                            </div>
                        </div>
                    }

                </div>
            </div>

            @*<div class="form-group clearfix ">
                    <button id="btnConfirm" class="btn btn-lg btn-primary pull-right">Confirm</button>
                </div>*@
        }
        else
        {
            <div class="alert alert-danger col-md-12">
                <div class="col-md-8" style="margin-top: 10px;">This feed has not been analyzed yet. Please click on mentioned button for analyzing.</div>
                <div class="col-md-2 pull-right">
                    <a href='javascript:void(0);' class="btn btn-block btn-success" onclick="openReAnalyze(@Model.Item1.Id,true);" style="margin-top: 4px;">Analyze</a>
                </div>
            </div>
        }
    }
    <div id="EditFieldMappingDialog" class="modal" style="overflow: hidden;">
        No data found
    </div>
    <div id="ViewSampleJsonDialog" class="modal">
        <pre style="white-space: pre-wrap;max-height: 400px;">No data found</pre>
    </div>
    <div id="ViewSampleFeedKeyValueDialog" class="modal">
        <div></div>
        <b>Feed Data</b>
        <pre style="white-space: pre-wrap;max-height: 400px;">No data found</pre>
    </div>
    <div id="AddCustomFeedKeyMappingDialog" class="modal" style="overflow: hidden;">
        No data found
    </div>
    <div id="EditCustomFeedKeyMappingDialog" class="modal" style="overflow: hidden;">
        No data found
    </div>
    <div id="SessionTimeoutDialog" class="modal" style="overflow: hidden;">
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="ModelFiled" tabindex="-1" role="dialog" aria-labelledby="ModelFiledTitle" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ModelFiledLongTitle">
                    <b>Skip optional field</b>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <table class="table table-bordered table-condensed table-responsive" id="TableForSkip">
                            <thead>
                                <tr>
                                    <th style="width:10px;" title="Selected all">
                                        #
                                    </th>
                                    <th>Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        @Html.CheckBox("Model[0].IsSkip", false, new { @class = "chkbgcolor" })
                                    </td>
                                    <td>
                                        Address
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Html.CheckBox("Model[1].IsSkip", false, new { @class = "chkbgcolor" })
                                    </td>
                                    <td>
                                        Place
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Html.CheckBox("Model[2].IsSkip", false, new { @class = "chkbgcolor" })
                                    </td>
                                    <td>
                                        Image
                                    </td>
                                </tr>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="2">
                                        <span class="jsSelectedFiled" style="font-weight:bold;"></span>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="SkipField(this)">Save & Continue</button>
            </div>
        </div>
    </div>
</div>
<form id="fromData">
   
</form>
@section scripts{
    <script type="text/javascript">           
        var arrFeedMapping = [], arrFeedMappingFinal = [];
        var theForm = document.forms['fromData'];
        function addHidden(theForm, key, value) 
        {
            // Create a hidden input element, and append it to the form:
            var input = document.createElement('input');
            input.type = 'hidden';
            input.name = key;
            input.value = value;
            theForm.appendChild(input);
        }
        $(function () {
            checkUpDownRowVisibility();
            $(".feedKeyMapping td.details-control").click(function () {
                $(this).parent().toggleClass("shown");
                if ($(this).parent().hasClass("shown")) {
                    $(this).parent().next(".childrow").show();
                }
                else {
                    $(this).parent().next(".childrow").hide();
                }
            });

            $(".expandAll").click(function () {
                $('.childrow').prev('tr').addClass('shown');
                $('.childrow').slideDown();
            });

            $(".collapseAll").click(function () {
                $('.childrow').prev('tr').removeClass('shown');
                $('.childrow').slideUp();
            });

            $(document).on('click', '.up,.down', function () {
                try {
                    var row = $(this).parents("tr:first");
                    var oCuuretnTable = $(row).closest("table").attr('data-selector-class');                   
                    if ($(this).is(".up")) {
                        var prevRow = (row.prev().hasClass('childrow') ? row.prev().prev() : row.prev());
                        var prevRowVal = prevRow.find("#new_Position").val();
                        var nextRowVal = row.find("#new_Position").val();

                        if (prevRowVal && nextRowVal) {
                            row.find("#new_Position").val(prevRowVal);
                            prevRow.find("#new_Position").val(nextRowVal);
                        }
                        row.fadeOut("slow", function () {
                            if (row.next().hasClass('childrow')) {
                                row.next().insertBefore(prevRow);
                                row.insertBefore(prevRow.prev()).fadeIn("slow");
                            }
                            else
                                row.insertBefore(prevRow).fadeIn("slow");
                            checkUpDownRowVisibility();
                        });
                    }
                    else if ($(this).is(".down")) {
                        var curRow = (row.next().hasClass('childrow') ? row.next() : row);
                        var nextRow = (curRow.next().next().hasClass('childrow') ? curRow.next().next() : curRow.next());
                        var prevRowVal = nextRow.find("#new_Position").val();
                        var nextRowVal = row.find("#new_Position").val();

                        if (prevRowVal && nextRowVal) {
                            row.find("#new_Position").val(prevRowVal);
                            nextRow.find("#new_Position").val(nextRowVal);
                        }
                        row.fadeOut("slow", function () {
                            if (row.next().hasClass('childrow')) {
                                row.next().insertAfter(nextRow);
                                row.insertAfter(nextRow).fadeIn("slow");
                            }
                            else
                                row.insertAfter(nextRow).fadeIn("slow");
                            checkUpDownRowVisibility();
                        });
                    }
                    if (oCuuretnTable != undefined)
                    {         
                        setTimeout(function () {
                            var oOddEven = 0;
                            $(".jsTable[data-selector-class='" + oCuuretnTable + "'] > tbody > tr").each(function (index)
                            {
                                var otr = $(this);                               
                                if (!$(otr).hasClass("childrow"))
                                {
                                    oOddEven++;
                                    if (oOddEven % 2 == 0) {
                                        $(otr).removeClass("odd");
                                        $(otr).addClass("even");
                                    }
                                    else {
                                        $(otr).addClass("odd");
                                        $(otr).removeClass("even");
                                    }                                       
                                }                                
                            });
                        },1000);
                    }                    
                } catch (e) {
                    console.log("Error : document : " + e.message);
                }
            });

            $('#ViewSampleJsonDialog').dialog({
                autoOpen: false,
                width: 800,
                //height: 500,
                resizable: false,
                title: 'View Sample Json',
                modal: true,
                buttons: {
                    "Close": function () {
                        SetScrollPage(false);
                        $(this).dialog("close");
                    }
                },
                open: function (event, ui) {
                    SetScrollPage(true);
                    changeDialogPosition();
                }
            });

            $('#ViewSampleFeedKeyValueDialog').dialog({
                autoOpen: false,
                width: 800,
                //height: 500,
                resizable: false,
                title: 'View Feed Key Data',
                modal: true,
                buttons: {
                    "Close": function () {
                        $(this).dialog("close");
                    }
                },
                open: function (event, ui) {
                    changeDialogPosition();
                }
            });

            $('#EditFieldMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                resizable: false,
                title: 'Edit Field Mapping',
                modal: true,
                buttons: {
                    'Save Without Selection': {
                        text: 'Save Without Selection',
                        id: "SaveWithoutSelection",
                        click: function () {
                            if ($('#frmEditFieldMapping').length > 0) {
                                if ($("#FeedKeyBeforeChange").val()) {
                                    swal({
                                        title: 'Do you want to effect on Intelligent Mapping as well?',
                                        type: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Yes',
                                        cancelButtonText: 'No'
                                    }).then(() => {
                                        console.log("Confirmed:Effect to Intelligent Mapping");
                                        $('#EffectToInteMapping').val(true);
                                        editFieldMapping(false);
                                    }, () => {
                                        console.log("Rejected:Effect to Intelligent Mapping");
                                        $('#EffectToInteMapping').val(false);
                                        editFieldMapping(false);
                                    });
                                }
                                else {
                                    $('#EffectToInteMapping').val(false);
                                    editFieldMapping(false);
                                }
                            }
                        }
                    },
                    'Save': {
                        text: 'Save',
                        id: "Save",
                        click: function () {
                            if ($('#frmEditFieldMapping').length > 0) {
                                if ($("#frmEditFieldMapping").valid()) {
                                    var selectedNodeCount = $("#FeedKeyTree").jstree("get_selected").length;
                                    if (selectedNodeCount == 0) {
                                        toastr.error("Please select at least one feed key from the tree view");
                                        return;
                                    }                                    
                                    swal({
                                        title: 'Do you want to effect on Intelligent Mapping as well?',
                                        type: 'warning',
                                        showCancelButton: true,
                                        confirmButtonColor: '#3085d6',
                                        cancelButtonColor: '#d33',
                                        confirmButtonText: 'Yes',
                                        cancelButtonText: 'No'
                                    }).then(() => {
                                        $('#EffectToInteMapping').val(true);
                                        editFieldMapping(true);
                                    }, () => {
                                        $('#EffectToInteMapping').val(false);
                                        editFieldMapping(true);
                                    });
                                }
                            }
                        }
                    },
                    'Close': function () {
                        $(this).dialog("close");
                        SetScrollPage(false);
                    }
                },
                open: function (event, ui) {
                    SetScrollPage(true);
                    $('#frmEditFieldMapping').validate({
                        rules: {
                            FeedKeyPath: { required: true }
                        }
                    });
                }
            });

            $('#AddCustomFeedKeyMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                //height: 500,
                resizable: false,
                title: 'Add Custom Feed Key',
                modal: true,               
                buttons: {
                    "Save": function () {
                        if ($('#frmCreateCustomFeedKeyMapping').length > 0) {
                            if ($("#frmCreateCustomFeedKeyMapping").valid()) {
                                var selectedNodeCount = $("#frmCreateCustomFeedKeyMapping #LeafFeedKeyTree").jstree("get_selected").length;

                                if (selectedNodeCount == 0) {
                                    toastr.error("Please select at least one feed key from the tree view");
                                    return;
                                }
                                createCustomFeedMapping();
                            }
                        }
                    },
                    "Close": function () 
                    {                       
                        SetScrollPage(false);
                        $(this).dialog("close");
                    }
                },
                open: function (event, ui) {
                    SetScrollPage(true);
                    changeDialogPosition();
                    if ($('#frmCreateCustomFeedKeyMapping').length > 0) {
                        $('#frmCreateCustomFeedKeyMapping').validate({
                            rules: {
                                CustomKeyName: {
                                    required: true,
                                    remote: {
                                        url: '@Url.Action("CheckFeedColumnName", "FeedProvider")',
                                        type: "post",
                                        data: {
                                            FeedProviderId: function () {
                                                return $("#Id").val();
                                            },
                                            columnName: function () {
                                                return $("#frmCreateCustomFeedKeyMapping #CustomKeyName").val();
                                            }
                                        }
                                    }
                                }
                            },
                            messages: {
                                CustomKeyName: {
                                    required: "This field is required.",
                                    remote: "Custom Key Name already exists."
                                }
                            }
                        });
                    }
                },
                close: function (event, ui) {
                    //$("#frmCreateCustomFeedKeyMapping").remove();
                }
            });

            $('#EditCustomFeedKeyMappingDialog').dialog({
                autoOpen: false,
                width: 600,
                //height: 500,
                resizable: false,
                title: 'Edit Custom Feed Key',
                modal: true,
                buttons: {
                    "Save": function () {
                        if ($('#frmEditCustomFeedKeyMapping').length > 0) {
                            if ($("#frmEditCustomFeedKeyMapping").valid()) {
                                var selectedNodeCount = $("#frmEditCustomFeedKeyMapping #LeafFeedKeyTree").jstree("get_selected").length;

                                if (selectedNodeCount == 0) {
                                    toastr.error("Please select at least one feed key from the tree view");
                                    return;
                                }
                                editCustomFeedMapping();
                            }
                        }
                    },
                    "Close": function () {
                        $(this).dialog("close");
                    }
                },
                open: function (event, ui) {
                    changeDialogPosition();
                    if ($('#frmEditCustomFeedKeyMapping').length > 0) {
                        $('#frmEditCustomFeedKeyMapping').validate({
                            rules: {
                                CustomKeyName: {
                                    required: true,
                                    remote: {
                                        url: '@Url.Action("CheckFeedColumnName", "FeedProvider")',
                                        type: "post",
                                        data: {
                                            id: function () {
                                                return $("#frmEditCustomFeedKeyMapping #Id").val();
                                            },
                                            FeedProviderId: function () {
                                                return $("#Id").val();
                                            },
                                            columnName: function () {
                                                return $("#frmEditCustomFeedKeyMapping #CustomKeyName").val();
                                            },
                                        }
                                    }
                                }
                            },
                            messages: {
                                CustomKeyName: {
                                    required: "This field is required.",
                                    remote: "Custom Key Name already exists."
                                }
                            }
                        });
                    }
                },
                close: function (event, ui) {
                    //$("#frmEditCustomFeedKeyMapping").remove();
                }
            });

            $('#SessionTimeoutDialog').dialog({
                autoOpen: false,
                width: 410,
                left: 465,
                resizable: false,
                title: 'Login',
                modal: true,
                open: function (event, ui) {
                    changeDialogPosition();
                    $('#frmLoginPopup').validate({
                        rules: {
                            Email: {
                                required: true
                            },
                            Password: {
                                required: true
                            }
                        },
                        messages: {
                            Email: {
                                required: "This field is required."
                            },
                            Password: {
                                required: "This field is required."
                            }
                        }
                    });
                }
            });

            $.validator.addMethod("checkTags", function (value) {
                //add custom method
                //Tags input plugin converts input into div having id #YOURINPUTID_tagsinput
                //now you can count no of tags
                return ($("#PossibleMatches").prev(".bootstrap-tagsinput").find('.tag').length > 0);
            });

            $("#btnConfirm").click(function () {   
                //debugger;    
                arrFeedMapping = [], arrFeedMappingFinal = [];

                //confirm feed analysis
                var feedProviderId = $("#Id").val();

                //get feed mapping done in the matched section
                GetMappingByTableId($('#tblMatchesFound'));

                //get feed mapping done in the not matched ection
                GetMappingByTableId($('#tblMatchesNotFound'));

                if (arrFeedMapping.length == 0) {
                    toastr.error("Please map at least one feed key with column name");
                    return;
                }
                var model={
                    lstFeedMapping:JSON.stringify(arrFeedMappingFinal),
                    feedProviderId:feedProviderId,
                    IsFeedMappingChanged:arrFeedMappingFinal.length > 0
                };
                /*Genrate dynamic from*/
                addHidden(theForm,"feedProviderId",feedProviderId);
                addHidden(theForm,"IsFeedMappingChanged",(arrFeedMappingFinal.length > 0));
                for(var i=0;i<arrFeedMappingFinal.length;i++)
                {
                    addHidden(theForm,"lstFeedMapping["+i+"].FeedProviderId",arrFeedMappingFinal[i].FeedProviderId);
                    addHidden(theForm,"lstFeedMapping["+i+"].ParentId",arrFeedMappingFinal[i].ParentId);
                    addHidden(theForm,"lstFeedMapping["+i+"].FeedMappingParentId",arrFeedMappingFinal[i].FeedMappingParentId);
                    addHidden(theForm,"lstFeedMapping["+i+"].IsCustomFeedKey",arrFeedMappingFinal[i].IsCustomFeedKey);
                    addHidden(theForm,"lstFeedMapping["+i+"].TableName",arrFeedMappingFinal[i].TableName);
                    addHidden(theForm,"lstFeedMapping["+i+"].ColumnName",arrFeedMappingFinal[i].ColumnName);
                    addHidden(theForm,"lstFeedMapping["+i+"].FeedKeyPath",arrFeedMappingFinal[i].FeedKeyPath);
                    addHidden(theForm,"lstFeedMapping["+i+"].ActualFeedKeyPath",arrFeedMappingFinal[i].ActualFeedKeyPath);
                    addHidden(theForm,"lstFeedMapping["+i+"].ColumnDataType",arrFeedMappingFinal[i].ColumnDataType);
                    addHidden(theForm,"lstFeedMapping["+i+"].Position",arrFeedMappingFinal[i].Position);
                    addHidden(theForm,"lstFeedMapping["+i+"].EffectToInteMapping",arrFeedMappingFinal[i].EffectToInteMapping);
                }
                /*End*/

                $.ajax({
                    url: '@Url.Action("ConfirmFeedAnalysis","FeedProvider")',
                    data:$("#fromData").serialize(),
                    dataType: 'json',                   
                    type: 'POST',
                    success: function (data, textStatus, jQxhr) 
                    {
                        if (data.status == true) {                                           
                            window.location.reload();
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        if (jqXhr.status == 401) {                           
                            $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                                $("#SessionTimeoutDialog").dialog("open");
                            });
                        }
                        else
                            toastr.error("Something went wrong. Please try again soon.");
                    }
                });
            });

            $(document).on('click', '.editFieldMapping:enabled', function () {
                openEditFieldMapping(this);
            });
        });        
        
         $('#AddCustomFeedKeyMappingDialog, #ViewSampleJsonDialog, #EditFieldMappingDialog').on('dialogclose', function(event) {
             SetScrollPage(false);
        });

        function SetScrollPage(IsSet)
        {
            if(IsSet)
                $("body").css("overflow", "hidden");
            else
                $("body").css("overflow", "auto");
        }

        function changeDialogPosition() {
            try {
                $('.modal').dialog("option", "position", { my: "center top", at: "center top+50", of: window });
            } catch (e) {
                console.log("Error : changeDialogPosition : " + e.message);
            }
        }

        function GetMappingByTableId(table) {
            $(table).find("tbody tr:not(.childrow)").each(function (i, obj) {
                GetMappingByTableIdInner(i, obj);
            });
        }

        function GetMappingByTableIdInner(i, obj) {
            var feedProviderId = $("#Id").val();
            var prevFeedKeyPath = $(obj).data("feedKeyPath");

            var tableName = $($(obj).find('.tableName')[0]).text(),
            columnName = $($(obj).find('.actualColumnName')[0]).val(),
            feedKeyPath = $($(obj).find('.feedKeyPath > span')[0]).text();

            if (tableName != undefined && tableName != '') {
                var parentId = $($(obj).find('.parentId')[0]).val();
                var feedMappingParentId = $($(obj).find('.feedMappingParentId')[0]).val();
                var isCustomFeedKey = $($(obj).find('.isCustomFeedKey')[0]).val();
                var actualFeedKeyPath = $($(obj).find('.actualFeedKeyPath')[0]).val();
                var ColumnDataType = $($(obj).find('.ColumnDataType')[0]).val();
                var oldPosition = $($(obj).find('#old_Position')[0]).val();
                var newPosition = $($(obj).find('#new_Position')[0]).val();
                var EffectToInteMapping = $($(obj).find('.EffectToInteMapping')[0]).val();

                var feedMappingObj = {
                    FeedProviderId: feedProviderId,
                    ParentId: parentId,
                    FeedMappingParentId: feedMappingParentId,
                    IsCustomFeedKey: isCustomFeedKey,
                    TableName: tableName,
                    ColumnName: columnName,
                    FeedKeyPath: feedKeyPath,
                    ActualFeedKeyPath: actualFeedKeyPath,
                    ColumnDataType: ColumnDataType,
                    Position: newPosition,
                    //EffectToInteMapping: (!feedKeyPath ? EffectToInteMapping : true)
                    EffectToInteMapping: EffectToInteMapping
                };

                if (prevFeedKeyPath != feedKeyPath || oldPosition != newPosition)
                    arrFeedMappingFinal.push(feedMappingObj);

                arrFeedMapping.push(feedMappingObj);
            }

            if ($(obj).hasClass('childrow')) {
                var matchedFields = $('.childrow').children('.matchedFields');

                var tableCount = $(matchedFields).find('table').length;

                if (tableCount > 0) {
                    GetMappingByTableId($(matchedFields).find('table')[0]);
                }

                var nonMatchedFields = $('.childrow').children('.nonMatchedFields');

                var tableCount = $(nonMatchedFields).find('table').length;

                if (tableCount > 0) {
                    GetMappingByTableId($(nonMatchedFields).find('table')[0]);
                }
            }
        }

        function openViewSampleJson() {
            var feedProviderId = $("#Id").val(),
                jsonFileName = $("#SampleJSONFIleName").val();
            $("#ViewSampleJsonDialog pre").load('@(Url.Action("ViewItemJson", "FeedProvider"))/' + feedProviderId + "?jsonFileName=" + jsonFileName, function (response, status, xhr) {
                if (xhr.status == 401) {
                    window.stop();
                    $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                        $("#SessionTimeoutDialog").dialog("open");
                    });
                }
                else
                    $("#ViewSampleJsonDialog").dialog("open");
            });
        }

        function openEditFieldMapping(row) {
            if (row != null || row != undefined) {
                var feedProviderId = $("#Id").val(),
                    jsonFileName = $("#JSONTreeFileName").val();
                var tableName = $($(row).parent().parent().find('.tableName')[0]).text(),
                    actualColumnName = $($(row).parent().parent().find('.actualColumnName')[0]).val(),
                    feedKeyPath = $($(row).parent().parent().find('.feedKeyPath > span')[0]).text(),
                    ColumnDataType = $($(row).parent().parent().find('.ColumnDataType')[0]).val(),
                    feedKeyBeforeChange = $($(row).parent().parent().find('.feedKeyBeforeChange')[0]).val(),
                    parentFeedKeyPath = '';

                var childRow = $(row).closest('tr.childrow');

                if (childRow.length == 1) {
                    parentFeedKeyPath = $(childRow.prev('tr').find('.feedKeyPath > span')[0]).text();
                }

                var baseUrl = '@Url.Action("EditFieldMapping", "FeedProvider")';
                var finalUrl = baseUrl + '/' + feedProviderId + "?tableName=" + tableName + "&columnName=" + actualColumnName + "&feedKeyPath=" + encodeURIComponent(feedKeyPath) + "&parentFeedKeyPath=" + encodeURIComponent(parentFeedKeyPath) + "&jsonFileName=" + encodeURIComponent(jsonFileName);

                //$("#EditFieldMappingDialog").dialog("open");

                $("#EditFieldMappingDialog").load(finalUrl, function (response, status, xhr) {
                    if (xhr.status == 401) {
                        window.stop();
                        $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                            $("#SessionTimeoutDialog").dialog("open");
                        });
                    }
                    else {
                        if (!feedKeyPath)
                            $("#SaveWithoutSelection").hide();
                        else
                            $("#SaveWithoutSelection").show();
                        $("#FeedKeyBeforeChange").val(feedKeyBeforeChange);
                        $("#EditFieldMappingDialog").dialog("open");
                    }
                });
            }
        }

        function openViewSampleFeedKeyValue(row) {
            debugger;
            if (row != null || row != undefined) {
                var html = '';
                var feedProviderId = $("#Id").val(),
                    jsonFileName = $("#SampleJSONFIleName").val();

                var tableName = $($(row).parent().parent().find('.tableName')[0]).text();
                var columnName = $($(row).parent().parent().find('.columnName span')[0]).text();
                var feedKeyPath = $($(row).parent().parent().find('.feedKeyPath > span')[0]).text();
                var actualFeedKeyPath = $($(row).parent().parent().find('.actualFeedKeyPath')[0]).val();

                html += '<table class="table table-bordered table-striped">';
                html += '   <tr>'
                html += '       <th>Table Name</th>'
                html += '       <td>' + tableName + '</td>'
                html += '   </tr>'
                html += '   <tr>'
                html += '       <th>Column Name</th>'
                html += '       <td>' + columnName + '</td>'
                html += '   </tr>'
                html += '   <tr>'
                html += '       <th>Feed Key</th>'
                html += '       <td>' + feedKeyPath + '</td>'
                html += '   </tr>'
                html += '</table>';

                $("#ViewSampleFeedKeyValueDialog").children('div').html(html);

                //var baseUrl = '@Url.Action("ViewFeedKeyJson", "FeedProvider")';
                var baseUrl = '@Url.Action("ViewFeedKeyJson_v1", "FeedProvider")';
                var finalUrl = baseUrl + '?id=' + feedProviderId + "&jsonPath=" + encodeURIComponent(actualFeedKeyPath) + "&jsonFileName=" + encodeURIComponent(jsonFileName);

                $("#ViewSampleFeedKeyValueDialog").children('pre').load(finalUrl, function (response, status, xhr) {
                    if (xhr.status == 401) {
                        window.stop();
                        $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                            $("#SessionTimeoutDialog").dialog("open");
                        });
                    }
                    else
                        $("#ViewSampleFeedKeyValueDialog").dialog("open");
                });
            }
        }

        function openAddCustomFeedKey() {
            var feedProviderId = $("#Id").val(),
                jsonFileName = $("#JsonTreeWithDisabledKeysFileName").val();
            $("#AddCustomFeedKeyMappingDialog").load('@(Url.Action("CreateCustomFeedKeyMapping", "FeedProvider"))/' + feedProviderId + "?jsonFileName=" + jsonFileName, function (response, status, xhr) {
                if (xhr.status == 401) {
                    window.stop();
                    $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                        $("#SessionTimeoutDialog").dialog("open");
                    });
                }
                else
                    $("#AddCustomFeedKeyMappingDialog").dialog("open");
            });
        }

        function openEditCustomFeedKey(id) {
            var feedProviderId = $("#Id").val(),
                jsonFileName = $("#JsonTreeWithDisabledKeysFileName").val();
            $("#EditCustomFeedKeyMappingDialog").load('@(Url.Action("EditCustomFeedKeyMapping", "FeedProvider"))?id=' + id + '&feedProviderId=' + feedProviderId + "&jsonFileName=" + jsonFileName, function (response, status, xhr) {
                if (xhr.status == 401) {
                    window.stop();
                    $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                        $("#SessionTimeoutDialog").dialog("open");
                    });
                }
                else
                    $("#EditCustomFeedKeyMappingDialog").dialog("open");
            });
        }

        function editFieldMapping(isSelection) {
            var tableName = $("#TableName").val();
            var columnName = $("#ColumnName").val();
            var actualColumnName = $("#ActualColumnName").val();
            var feedKeyNodeValue = $("#FeedKeyPath").val();
            //var effectToInteMapping = $('#EffectToInteMapping').is(":checked") ? true : false;
            var effectToInteMapping = $('#EffectToInteMapping').val();
            var feedKeyPath = '';
            var actualFeedKeyPath = '';
            var columnDataType = '';

            if (isSelection == true) {
                var feedKeyPathNodeParts = feedKeyNodeValue.split('||');
                feedKeyPath = feedKeyPathNodeParts[0];
                actualFeedKeyPath = feedKeyPathNodeParts[1];
                columnDataType = feedKeyPathNodeParts[2]
            }
            var tblMatchesFoundRow = $("#tblMatchesFound tbody tr[data-table-name='" + tableName + "'][data-column-name='" + actualColumnName + "']");
            var tblMatchesNotFoundRow = $("#tblMatchesNotFound tbody tr[data-table-name='" + tableName + "'][data-column-name='" + actualColumnName + "']");

            if (tblMatchesFoundRow.length == 1) {
                moveRowToTargetTable(tblMatchesFoundRow, isSelection, feedKeyPath, actualFeedKeyPath, columnDataType, effectToInteMapping);
            }
            else if (tblMatchesNotFoundRow.length == 1) {
                moveRowToTargetTable(tblMatchesNotFoundRow, isSelection, feedKeyPath, actualFeedKeyPath, columnDataType, effectToInteMapping);
            }

            $("#EditFieldMappingDialog").dialog("close");
        }

        function moveRowToTargetTable(element, isSelection, feedKeyPath, actualFeedKeyPath, columnDataType, effectToInteMapping) {
            if (element.length == 1) {
                var feedKeyPathElement = element.find('.feedKeyPath > span');
                var actualFeedKeyPathElement = element.find('.actualFeedKeyPath');
                var ColumnDataTypeElement = element.find('.ColumnDataType');
                var EffectToInteMapping = element.find('.EffectToInteMapping');
                $(feedKeyPathElement[0]).text(feedKeyPath);
                $(actualFeedKeyPathElement[0]).val(actualFeedKeyPath);
                $(ColumnDataTypeElement[0]).val(columnDataType);
                $(EffectToInteMapping[0]).val(effectToInteMapping);

                var childRow = $(element).next('.childrow');

                var matchedFields;
                var nonMatchedFields;
                var targetTbody;
                var sourceTbody;

                if (isSelection == true) {
                    nonMatchedFields = $(element).closest('.nonMatchedFields');

                    //check if need to move to target element
                    if (nonMatchedFields.length == 0)
                        return;

                    //get first closest one
                    nonMatchedFields = nonMatchedFields[0];
                    matchedFields = $(nonMatchedFields).prev('.matchedFields');
                }
                else {
                    matchedFields = $(element).closest('.matchedFields');

                    //check if need to move to target element
                    if (matchedFields.length == 0)
                        return;

                    //get first closest one
                    matchedFields = matchedFields[0];
                    nonMatchedFields = $(matchedFields).next('.nonMatchedFields');
                }

                if (isSelection == true) {
                    //recursively move all childs from non-matched to matched section
                    sourceTbody = $(nonMatchedFields).children().children().children('table > tbody');
                    targetTbody = $(matchedFields).children().children().children('table > tbody');

                    if (targetTbody.length > 0) {
                        //get the first immediate tbody
                        targetTbody = targetTbody[0];

                        $(targetTbody).children('tr.trNotFound').hide();

                        //this will move row from source and append it to target element
                        element.find("td:last").attr('colspan', 2);
                        //element.append('<td style="vertical-align: middle;"><a href="javascript:void(0);" class="up"><i class="fa fa-arrow-circle-o-up" style="font-size: 30px;margin-bottom:5px;"></i></a><a href="javascript:void(0);" class="down"><i class="fa fa-arrow-circle-o-down" style="font-size: 30px;"></i></a></td>');
                        //$(targetTbody).find("tr.trNotFound").before(element);

                        $(targetTbody).append(element);

                        if (childRow.length == 1) {
                            $(targetTbody).append(childRow);

                            //enable buttons of child feed key mappings
                            var childMatchedFieldsTable = $(childRow).children().children('.matchedFields').children().children('table');
                            var childNonMatchedFieldsTable = $(childRow).children().children('.nonMatchedFields').children().children('table')

                            if (childMatchedFieldsTable.length > 0) {
                                childMatchedFieldsTable = childMatchedFieldsTable[0];

                                var childMatchedRows = $(childMatchedFieldsTable).children('tbody').children('tr');

                                if (childMatchedRows.length > 0) {
                                    for (var i = 0; i < childMatchedRows.length; i++) {
                                        var changeBtn = $(childMatchedRows[i]).children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                                            $(changeBtn).removeAttr('disabled');
                                        }
                                    }
                                }
                            }

                            if (childNonMatchedFieldsTable.length > 0) {
                                childNonMatchedFieldsTable = childNonMatchedFieldsTable[0];

                                var childNonMatchedRows = $(childNonMatchedFieldsTable).children('tbody').children('tr');

                                if (childNonMatchedRows.length > 0) {
                                    for (var i = 0; i < childNonMatchedRows.length; i++) {
                                        var changeBtn = $(childNonMatchedRows[i]).children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                                            $(changeBtn).removeAttr('disabled');
                                        }
                                    }
                                }
                            }
                        }

                        if (sourceTbody.length > 0) {
                            //get the first immediate tbody
                            sourceTbody = sourceTbody[0];
                            var trCount = $(sourceTbody).children('tr').length;

                            //check if all rows moved except not found one
                            if (trCount == 1)
                                $(sourceTbody).children('tr.trNotFound').show();
                        }
                    }
                }
                else {
                    //recursively move all childs from matched to non-matched section
                    sourceTbody = $(matchedFields).children().children().children('table > tbody');
                    targetTbody = $(nonMatchedFields).children().children().children('table > tbody');

                    if (targetTbody.length > 0) {
                        //get the first immediate tbody
                        targetTbody = targetTbody[0];

                        $(targetTbody).children('tr.trNotFound').hide();

                        //this will move row from source and append it to target element
                        //element.find("td:last").remove();
                        element.find("td:last a.up").parent().remove();
                        element.find("td:last a.down").parent().remove();
                        element.find(".btn").not('.editFieldMapping').remove();

                        $(targetTbody).append(element);

                        if (childRow.length == 1) {
                            $(targetTbody).append(childRow);

                            var childMatchedFieldsTable = $(childRow).children().children('.matchedFields').children().children('table');
                            var childNonMatchedFieldsTable = $(childRow).children().children('.nonMatchedFields').children().children('table')

                            //this will move all rows from matched table to non-matched table
                            if (childMatchedFieldsTable.length > 0) {
                                childMatchedFieldsTable = childMatchedFieldsTable[0];

                                var childMatchedRows = $(childMatchedFieldsTable).children('tbody').children('tr:not(.trNotFound)');

                                if (childMatchedRows.length > 0) {
                                    for (var i = 0; i < childMatchedRows.length; i++) {
                                        moveRowToTargetTable($(childMatchedRows[i]), isSelection, feedKeyPath, actualFeedKeyPath, columnDataType);                                       
                                    }
                                }
                            }

                            //disable buttons of child feed key mappings
                            if (childNonMatchedFieldsTable.length > 0) {
                                childNonMatchedFieldsTable = childNonMatchedFieldsTable[0];

                                var childNonMatchedRows = $(childNonMatchedFieldsTable).children('tbody').children('tr');

                                if (childNonMatchedRows.length > 0) {
                                    for (var i = 0; i < childNonMatchedRows.length; i++) {
                                        var changeBtn = $(childNonMatchedRows[i]).children().children('.editFieldMapping');
                                        if (changeBtn.length != 0) {
                                            $(changeBtn).attr('disabled', 'disabled');
                                        }
                                    }
                                }
                            }
                        }

                        if (sourceTbody.length > 0) {
                            //get the first immediate tbody
                            sourceTbody = sourceTbody[0];
                            var trCount = $(sourceTbody).children('tr').length;
                            //check if all rows moved except not found one
                            if (trCount == 1)
                                $(sourceTbody).children('tr.trNotFound').show();
                        }
                        checkUpDownRowVisibility();
                    }
                }
                //checkUpDownRowVisibility();
            }
        }

        function createCustomFeedMapping() {
            var feedProviderId = $("#Id").val();
            var customKeyName = $("#frmCreateCustomFeedKeyMapping #CustomKeyName").val();
            var feedKeyPath = $("#frmCreateCustomFeedKeyMapping #FeedKeyPath").val();

            var input = {
                FeedProviderId: feedProviderId,
                CustomKeyName: customKeyName,
                FeedKeyPath: feedKeyPath
            };

            //ajax call to save data
            $.ajax({
                //url: '@Url.Action("CreateCustomFeedKeyMapping", "FeedProvider")',
                url: '@Url.Action("CreateCustomFeedKeyMapping_v1", "FeedProvider")',
                data: input,
                type: 'POST',
                success: function (data, textStatus, jQxhr) {
                    if (data.status == true) {
                        $("#AddCustomFeedKeyMappingDialog").dialog("close");
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    if (jqXhr.status == 401) {
                        $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                            $("#SessionTimeoutDialog").dialog("open");
                        });
                    }
                    else
                        toastr.error("Something went wrong. Please try again soon.");
                }
            });
        }

        function editCustomFeedMapping() {
            var id = $("#frmEditCustomFeedKeyMapping #Id").val();
            var feedProviderId = $("#Id").val();
            var customKeyName = $("#frmEditCustomFeedKeyMapping #CustomKeyName").val();
            var feedKeyPath = $("#frmEditCustomFeedKeyMapping #FeedKeyPath").val();

            var input = {
                Id: id,
                FeedProviderId: feedProviderId,
                CustomKeyName: customKeyName,
                FeedKeyPath: feedKeyPath
            };

            //ajax call to save data
            $.ajax({
                //url: '@Url.Action("EditCustomFeedKeyMapping", "FeedProvider")',
                url: '@Url.Action("EditCustomFeedKeyMapping_v1", "FeedProvider")',
                data: input,
                type: 'POST',
                success: function (data, textStatus, jQxhr) {
                    if (data.status == true) {
                        $("#EditCustomFeedKeyMappingDialog").dialog("close");
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    if (jqXhr.status == 401) {
                        $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                            $("#SessionTimeoutDialog").dialog("open");
                        });
                    }
                    else
                        toastr.error("Something went wrong. Please try again soon.");
                }
            });
        }

        function openDeleteCustomFeedKey(id) {
            swal({
                title: 'Are you sure to delete this custom feed key?',
                text: "You will not be able to recover!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then(function () {
                swal({
                    title: 'Do you want to effect on Intelligent Mapping as well?',
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No'
                }).then(() => {
                    deleteCustomFeedKey(id, true);
                }, () => {
                    deleteCustomFeedKey(id, false);
                });
                //deleteCustomFeedKey(id);
            },
            function () {
            });
        }

        function deleteCustomFeedKey(id, effectToIntemapping) {
            var url = '@Url.Action("DeleteCustomFeedKeyMapping", "FeedProvider")';
            $.ajax({
                url: url,
                type: "POST",
                data: { "id": id, "effectToIntemapping": effectToIntemapping },
                success: function (data) {
                    if (data.status == true) {
                        location.reload(true);
                    }
                    else {
                        toastr.error(data.message);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    if (jqXhr.status == 401) {
                        $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                            $("#SessionTimeoutDialog").dialog("open");
                        });
                    }
                    else
                        toastr.error("Something went wrong. Please try again soon.");
                }
            });
        }

        function activateDeactivateFeed(id, isActive) {
            swal({
                //title: 'Are you sure to ' + (!isActive ? 'activate' : 'delete') + ' this feed key?',
                title: (!isActive ? 'Are you sure to revert this feed key back?' : 'Are you sure to delete this feed key?'),
                //text: "You will not be able to recover",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes'
            }).then(function () {
                $.ajax({
                    url: '@Url.Action("ActivateDeactivateFeedKey", "FeedProvider")',
                    type: "POST",
                    data: { "id": id, "isActive": isActive },
                    success: function (data) {
                        if (data.status == true) {
                            location.reload(true);
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        if (jqXhr.status == 401) {
                            $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/', function (response, status, xhr) {
                                $("#SessionTimeoutDialog").dialog("open");
                            });
                        }
                        else
                            toastr.error("Something went wrong. Please try again soon.");
                    }                   
                });
            });
        }
        
        function openReAnalyze(id, isForFirstTime) {
            if (isForFirstTime) {
                $.ajax({
                    url: '@(Url.Action("AnalyzeFeed_v1", "FeedProvider"))/' + id,
                    success: function (data) {
                        location.reload(true);
                    },
                    error: function (jqXhr, textStatus, errorThrown) {
                        if (jqXhr.status == 401) {
                            $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/',
                                function (response, status, xhr) {
                                    $("#SessionTimeoutDialog").dialog("open");
                                }
                            );
                        }                        
                    }                  
                });
            }
            else {
                swal({
                    title: 'Are you sure to reanalyze this feed as you may lose the changes?',
                    text: "You will not be able to recover",
                    type: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes'
                }).then(function () {
                    $.ajax({
                        url: '@(Url.Action("AnalyzeFeed_v1", "FeedProvider"))/' + id,
                        success: function (data) {
                            location.reload(true);
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            if (jqXhr.status == 401) {
                                $("#SessionTimeoutDialog").load('@(Url.Action("LoginWithModalPopup", "Account"))/',
                                    function (response, status, xhr) {
                                        $("#SessionTimeoutDialog").dialog("open");
                                    }
                                );
                            }                            
                        }                      
                    });
                });
            }
        }
        function checkUpDownRowVisibility(table) {
            if (!table) {
                var first_row = $("#tblMatchesFound > tbody > tr:not(.childrow, .trNotFound)").filter('tr:first')
                var last_row = $("#tblMatchesFound > tbody > tr:not(.childrow, .trNotFound)").filter('tr:last');
                $("#tblMatchesFound tbody tr td a.up").removeClass("not-active");
                $("#tblMatchesFound tbody tr td a.down").removeClass("not-active");
                if (first_row.length) {
                    first_row.find(".up").addClass("not-active");
                }
                if (last_row.length) {
                    last_row.find(".down").addClass("not-active");
                }
                checkUpDownRowVisibility("#tblMatchesFound");
            }
            else {
                /* above implementation with child row */
                $(table + "  > tbody > tr.childrow").each(function (i, obj) {
                    var id = table + "  > tbody > tr.childrow:eq(" + i + ")";

                    //var id = table + "  > tbody > tr.childrow";
                    //var child_first_row = $(obj).find(".matchedFields table > tbody > tr:not(.childrow, .trNotFound)").filter('tr:first');
                    //var child_last_row = $(obj).find(".matchedFields table > tbody > tr:not(.childrow, .trNotFound)").filter('tr:last');
                    //var child_last_rows = $(obj).find(".matchedFields table > tbody > tr:not(.childrow, .trNotFound)");

                    var child_first_row = $(id + " > td:eq(1) > .matchedFields > div > table > tbody > tr:not(.childrow, .trNotFound)").filter('tr:first');
                    var child_last_row = $(id + " > td:eq(1) > .matchedFields > div > table > tbody > tr:not(.childrow, .trNotFound)").filter('tr:last');
                    //var child_last_rows = $(id + " > td:eq(1) > .matchedFields > div > table > tbody > tr:not(.childrow, .trNotFound)");

                    //$("#tblMatchesFound  > tbody > tr.childrow:eq(1) > td:eq(1) > .matchedFields > div > table > tbody > tr:not(.childrow, .trNotFound)")

                    $(obj).find(".matchedFields table > tbody > tr > td > a.up").removeClass("not-active");
                    $(obj).find(".matchedFields table > tbody > tr > td > a.down").removeClass("not-active");
                    if (child_first_row.length) {
                        //console.log("first row:" + $(child_first_row).find(".feedKeyPath span").text());
                        child_first_row.find(".up").addClass("not-active");
                    }
                    if (child_last_row.length) {
                        //console.log("last row:" + $(child_last_row).find(".feedKeyPath span").text());
                        child_last_row.find(".down").addClass("not-active");
                    }

                    if ($(id + " .matchedFields > div > table > tbody > tr.childrow").length > 0)
                        checkUpDownRowVisibility(id + " .matchedFields > div > table");
                });
            }
        }
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            try {
                var oResult = '@Html.Raw(Model?.Item2?.Count)';
                //if (oResult == 0)
                //$("#ModelFiled").modal('show');
            }
            catch (e) {
                console.log("Error : $(document).ready : " + e.message);
            }
        });

        function SkipField(elem) {
            try {
                alert('ok');
            }
            catch (e) {
                console.log("Error : SkipField : " + e.message);
            }
        }
        $(".chkbgcolor").change(function () {
            var oCurretTR = $(this).closest("tr");
            if ($(this).is(":checked")) {
                $(oCurretTR).addClass("skipfiled", 500);
            }
            else {
                $(oCurretTR).removeClass('skipfiled', 500);
            }

            $(".jsSelectedFiled").html($(".chkbgcolor:checked").length + " Item selected for skip");
        });
    </script>
}